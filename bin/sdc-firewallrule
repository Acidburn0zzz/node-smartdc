#!/usr/bin/env node
// -*- mode: js -*-
// vim: set filetype=javascript :
// Copyright 2014 Joyent, Inc.  All rights reserved.
var util = require('util');

var shared = require('../lib/shared'),
    printErr = shared.printErr,
    commonCb = shared.commonCb,
    DEFAULT_OPTIONS = shared.DEFAULT_OPTIONS,
    checkRequiredOptions = shared.checkRequiredOptions;
var cmdln = require('cmdln'),
    Cmdln = cmdln.Cmdln;

/**
 * SDCFirewallRule Cmdln sub class
 */
function SDCFirewallRule() {
    Cmdln.call(this, {
        name: 'sdc-firewallrule',
        desc: 'SmartDC Account Firewall Rules',
        // Custom options. By default you get -h/--help.
        options: DEFAULT_OPTIONS
    });
}
util.inherits(SDCFirewallRule, Cmdln);

SDCFirewallRule.prototype.init = function (opts, args, callback) {
    checkRequiredOptions.apply(this, arguments);
    Cmdln.prototype.init.apply(this, arguments);
    return false;
};


var generalOptions = [
    {
        names: ['help', 'h', '?'],
        type: 'bool',
        help: 'Show this help.'
    }
];


SDCFirewallRule.prototype.do_list = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    return self.cloudapi.listFwRules(commonCb);
};


SDCFirewallRule.prototype.do_list.options = generalOptions;
SDCFirewallRule.prototype.do_list.help = (
    'List your Account Firewall Rules.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} list [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);


SDCFirewallRule.prototype.do_get = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'Firewall Rule id must be specified'));
    }

    return self.cloudapi.getFwRule(args[0], commonCb);
};


SDCFirewallRule.prototype.do_get.options = generalOptions;
SDCFirewallRule.prototype.do_get.help = (
    'Get an account FirewallRule by id.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} get [OPTIONS] fwrule_id \n' +
    '\n' +
    '{{options}}'
);


SDCFirewallRule.prototype.do_machines = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'Firewall Rule id must be specified'));
    }

    return self.cloudapi.listRuleMachines(args[0], commonCb);
};


SDCFirewallRule.prototype.do_machines.options = generalOptions;
SDCFirewallRule.prototype.do_machines.help = (
    'List machines affected by the given FirewallRule id.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} machines [OPTIONS] fwrule_id \n' +
    '\n' +
    '{{options}}'
);


SDCFirewallRule.prototype.do_create = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    var params = {};

    if (opts.rule) {
        params.rule = opts.rule;
    }

    if (opts.enabled) {
        params.enabled = opts.enabled;
    }

    if (opts.description) {
        params.description = opts.description;
    }

    return self.cloudapi.createFwRule(params, commonCb);
};


SDCFirewallRule.prototype.do_create.options = [ {
    names: ['rule', 'r'],
    type: 'string',
    help: 'The firewall rule contents'
}, {
    names: ['help', 'h', '?'],
    type: 'bool',
    help: 'Show this help.'
}, {
    names: ['enabled', 'e'],
    type: 'bool',
    help: 'Is the Firewall Rule Enabled?'
}, {
    name: 'description',
    type: 'string',
    help: 'An optional Firewall Rule description'
}];

SDCFirewallRule.prototype.do_create.help = (
    'Creates a new FirewallRule for your account.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} create [OPTIONS] \n' +
    '\n' +
    '{{options}}'
);


SDCFirewallRule.prototype.do_update = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'Firewall Rule id must be specified'));
    }

    var params = {};

    if (opts.enabled) {
        params.enabled = opts.enabled;
    }

    if (opts.rule) {
        params.rule = opts.rule;
    }

    if (opts.description) {
        params.description = opts.description;
    }

    return self.cloudapi.updateFwRule(args[0], params, commonCb);
};


SDCFirewallRule.prototype.do_update.options = [ {
    names: ['rule', 'r'],
    type: 'string',
    help: 'The firewall rule contents'
}, {
    names: ['help', 'h', '?'],
    type: 'bool',
    help: 'Show this help.'
}, {
    names: ['enabled', 'e'],
    type: 'bool',
    help: 'Is the Firewall Rule Enabled?'
}, {
    name: 'description',
    type: 'string',
    help: 'An optional Firewall Rule description'
}];

SDCFirewallRule.prototype.do_update.help = (
    'Updates a Firewall Rule of your account.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} create [OPTIONS] \n' +
    '\n' +
    '{{options}}'
);


SDCFirewallRule.prototype.do_delete = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'FirewallRule id must be specified'));
    }

    return self.cloudapi.deleteFwRule(args[0], commonCb);

};


SDCFirewallRule.prototype.do_delete.options = generalOptions;
SDCFirewallRule.prototype.do_delete.help = (
    'Removes a Firewall Rule from your account.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} delete [OPTIONS] fwrule_id \n' +
    '\n' +
    '{{options}}'
);

SDCFirewallRule.prototype.do_enable = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'Firewall Rule id must be specified'));
    }

    return self.cloudapi.enableFwRule(args[0], commonCb);
};


SDCFirewallRule.prototype.do_enable.options = generalOptions;
SDCFirewallRule.prototype.do_enable.help = (
    'Enables an account FirewallRule by id.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} enable [OPTIONS] fwrule_id \n' +
    '\n' +
    '{{options}}'
);

SDCFirewallRule.prototype.do_disable = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'Firewall Rule id must be specified'));
    }

    return self.cloudapi.disableFwRule(args[0], commonCb);
};


SDCFirewallRule.prototype.do_disable.options = generalOptions;
SDCFirewallRule.prototype.do_disable.help = (
    'Disables an account FirewallRule by id.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} disable [OPTIONS] fwrule_id \n' +
    '\n' +
    '{{options}}'
);

if (require.main === module) {
    cmdln.main(SDCFirewallRule);
}
