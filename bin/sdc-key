#!/usr/bin/env node
// -*- mode: js -*-
// vim: set filetype=javascript :
// Copyright 2014 Joyent, Inc.  All rights reserved.
var util = require('util');
var fs = require('fs');
var shared = require('../lib/shared'),
    printErr = shared.printErr,
    commonCb = shared.commonCb,
    DEFAULT_OPTIONS = shared.DEFAULT_OPTIONS,
    checkRequiredOptions = shared.checkRequiredOptions;

var cmdln = require('cmdln'),
    Cmdln = cmdln.Cmdln;

/**
 * SDCKey Cmdln sub class
 */
function SDCKey() {
    Cmdln.call(this, {
        name: 'sdc-key',
        desc: 'SmartDC SSH keys',
        // Custom options. By default you get -h/--help.
        options: DEFAULT_OPTIONS
    });
}
util.inherits(SDCKey, Cmdln);

SDCKey.prototype.init = function (opts, args, callback) {
    checkRequiredOptions.apply(this, arguments);
    Cmdln.prototype.init.apply(this, arguments);
    return false;
};


var generalOptions = [
    {
        names: ['help', 'h', '?'],
        type: 'bool',
        help: 'Show this help.'
    }
];


SDCKey.prototype.do_list = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    return self.cloudapi.listKeys(commonCb);
};


SDCKey.prototype.do_list.options = generalOptions;
SDCKey.prototype.do_list.help = (
    'List your SSH keys.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} list [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);


SDCKey.prototype.do_get = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'SSH key fingerprint must be specified'));
    }

    return self.cloudapi.getKey(args[0], commonCb);

};


SDCKey.prototype.do_get.options = generalOptions;
SDCKey.prototype.do_get.help = (
    'Get a SSH key from your account.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} get [OPTIONS] key_fingerprint \n' +
    '\n' +
    '{{options}}'
);


SDCKey.prototype.do_upload = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'Public SSH key required'));
    }

    function loadNewKey(key) {
        try {
            return fs.readFileSync(key, 'ascii');
        } catch (e) {
            return callback(new Error(
                    util.format('Unable to load key ' + key + ': ' + e)));
        }
    }

    var params = {
        key: loadNewKey(args[0])
    };

    if (opts.name) {
        params.name = opts.name;
    }

    return self.cloudapi.createKey(params, commonCb);
};


SDCKey.prototype.do_upload.options = [ {
    names: ['name', 'n'],
    type: 'string',
    help: 'SSH key name'
}, {
    names: ['help', 'h', '?'],
    type: 'bool',
    help: 'Show this help.'
}];
SDCKey.prototype.do_upload.help = (
    'Uploads a SSH key to your account.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} upload [OPTIONS] public_ssh_key \n' +
    '\n' +
    '{{options}}'
);


SDCKey.prototype.do_delete = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'SSH key fingerprint must be specified'));
    }

    return self.cloudapi.deleteKey(args[0], commonCb);

};


SDCKey.prototype.do_delete.options = generalOptions;
SDCKey.prototype.do_delete.help = (
    'Removes a SSH key from your account.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} delete [OPTIONS] key_fingerprint \n' +
    '\n' +
    '{{options}}'
);


if (require.main === module) {
    cmdln.main(SDCKey);
}
