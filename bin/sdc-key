#!/usr/bin/env node
// -*- mode: js -*-
// vim: set filetype=javascript :
// Copyright 2014 Joyent, Inc.  All rights reserved.
var url = require('url');

var util = require('util');
var path = require('path');
var fs = require('fs');

var bunyan = require('bunyan');
var smartdc = require('../lib/cloudapi'),
    CloudAPI = smartdc.CloudAPI;
var cmdln = require('cmdln'),
    Cmdln = cmdln.Cmdln;
var auth = require('smartdc-auth');

var pkg = require('../package.json');
var name = 'sdc';
var log = bunyan.createLogger({
    name: name,
    serializers: bunyan.stdSerializers,
    stream: process.stderr,
    level: 'warn'
});


/**
 * Print a CLI error for the given error object.
 *
 * @param error {Error} The error to print
 * @param options {Object} Optional:
 *      - `command` {String} The CLI command name. Else a guess is made.
 */
function printErr(err) {
    var code = (err.body ? err.body.code : err.code);
    var message = (err.body ? err.body.message : message);
    var cmd = path.basename(process.argv[1]);
    console.error('%s: error%s: %s',
        cmd,
        (code ? util.format(' (%s)', code) : ''),
        message);
}


/**
 * Common callback for all CLI operations.
 *
 * @param {Error} err optional error object.
 * @param {Object} obj optional response object.
 */
function commonCb(err, obj) {
    if (err) {
        if (err.statusCode === 410) {
            console.error('Object is Gone (410)');
            process.exit(3);
        }
        printErr(err);
        process.exit(3);
    }

    if (obj) {
        console.log(JSON.stringify(obj, null, 2));
    }

    process.exit(0);
}


/**
 * SDCKey Cmdln sub class
 */
function SDCKey() {
    Cmdln.call(this, {
        name: 'sdc-key',
        desc: 'SmartDC SSH keys',
        // Custom options. By default you get -h/--help.
        options: [
            {
                names: ['help', 'h', '?'],
                type: 'bool',
                help: 'Print help and exit.'
            }, {
                name: 'version',
                type: 'bool',
                help: 'Print version and exit.'
            }, {
                names: ['debug', 'd'],
                type: 'bool',
                help: 'enable debug/verbose mode (default: disabled)'
            },
            {
                names: ['account', 'a'],
                type: 'string',
                help: 'account name (default: env.SDC_ACCOUNT)',
                env: 'SDC_ACCOUNT'
            },
            {
                names: ['url', 'u'],
                type: 'string',
                help: 'url for SmartDataCenter API (default: env.SDC_URL)',
                env: 'SDC_URL'
            },
            {
                names: ['keyId', 'k'],
                type: 'string',
                help: 'your ssh key fingerprint (default: env.SDC_KEY_ID)',
                env: 'SDC_KEY_ID'
            }
        ]
    });
}
util.inherits(SDCKey, Cmdln);

SDCKey.prototype.init = function (opts, args, callback) {
    var self = this;

    if (opts.version) {
        console.log(this.name, pkg.version);
        return callback(false);
    }

    this.opts = opts;

    if (opts.debug) {
        process.env.DEBUG = 1;
        log.level('trace');
        log.src = true;
    }

    if (typeof (opts.keyId) === 'undefined') {
        return callback(new Error(
            'Either -k or (env) SDC_KEY_ID must be specified'));
    }

    if (!opts.account) {
        return callback(new Error(
            'Either -a or (env) SDC_ACCOUNT must be specified'));
    }

    if (!opts.url) {
        return callback(new Error(
            'Either -u or (env) SDC_URL must be specified'));
    }

    opts.log = log;

    opts.sign = auth.cliSigner({
        keyId: opts.keyId,
        user: opts.account
    });

    this.__defineGetter__('cloudapi', function () {
        if (self._cloudapi === undefined) {
            self._cloudapi = new CloudAPI(opts);
        }
        return (self._cloudapi);
    });

    Cmdln.prototype.init.apply(this, arguments);
    return false;
};


var generalOptions = [
    {
        names: ['help', 'h', '?'],
        type: 'bool',
        help: 'Show this help.'
    }
];


SDCKey.prototype.do_list = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    return self.cloudapi.listKeys(commonCb);
};


SDCKey.prototype.do_list.options = generalOptions;
SDCKey.prototype.do_list.help = (
    'List your SSH keys.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} list [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);


SDCKey.prototype.do_get = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'SSH key fingerprint must be specified'));
    }

    return self.cloudapi.getKey(args[0], commonCb);

};


SDCKey.prototype.do_get.options = generalOptions;
SDCKey.prototype.do_get.help = (
    'Get a SSH key from your account.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} get [OPTIONS] key_fingerprint \n' +
    '\n' +
    '{{options}}'
);


SDCKey.prototype.do_upload = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'Public SSH key required'));
    }

    function loadNewKey(key) {
        try {
            return fs.readFileSync(key, 'ascii');
        } catch (e) {
            return callback(new Error(
                    util.format('Unable to load key ' + key + ': ' + e)));
        }
    }

    var params = {
        key: loadNewKey(args[0])
    };

    if (opts.name) {
        params.name = opts.name;
    }

    return self.cloudapi.createKey(params, commonCb);
};


SDCKey.prototype.do_upload.options = [ {
    names: ['name', 'n'],
    type: 'string',
    help: 'SSH key name'
}, {
    names: ['help', 'h', '?'],
    type: 'bool',
    help: 'Show this help.'
}];
SDCKey.prototype.do_upload.help = (
    'Uploads a SSH key to your account.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} upload [OPTIONS] public_ssh_key \n' +
    '\n' +
    '{{options}}'
);


SDCKey.prototype.do_delete = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'SSH key fingerprint must be specified'));
    }

    return self.cloudapi.deleteKey(args[0], commonCb);

};


SDCKey.prototype.do_delete.options = generalOptions;
SDCKey.prototype.do_delete.help = (
    'Removes a SSH key from your account.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} delete [OPTIONS] key_fingerprint \n' +
    '\n' +
    '{{options}}'
);


if (require.main === module) {
    cmdln.main(SDCKey);
}
