#!/usr/bin/env node
// -*- mode: js -*-
// vim: set filetype=javascript :
// Copyright 2014 Joyent, Inc.  All rights reserved.
var util = require('util');
var fs = require('fs');
var shared = require('../lib/shared'),
    printErr = shared.printErr,
    commonCb = shared.commonCb,
    DEFAULT_OPTIONS = shared.DEFAULT_OPTIONS,
    checkRequiredOptions = shared.checkRequiredOptions;
var cmdln = require('cmdln'),
    Cmdln = cmdln.Cmdln;

/**
 * SDCKey Cmdln sub class
 */
function SDCUser() {
    Cmdln.call(this, {
        name: 'sdc-user',
        desc: 'SmartDC Account Users and SSH keys associated with them',
        // Custom options. By default you get -h/--help.
        options: DEFAULT_OPTIONS,
        helpOpts: {
            includeEnv: true
        }
    });
}
util.inherits(SDCUser, Cmdln);

SDCUser.prototype.init = function (opts, args, callback) {
    checkRequiredOptions.apply(this, arguments);
    Cmdln.prototype.init.apply(this, arguments);
    return false;
};


var generalOptions = [
    {
        names: ['help', 'h', '?'],
        type: 'bool',
        help: 'Show this help.'
    }
];


SDCUser.prototype.do_list = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    return self.cloudapi.listUsers(commonCb);
};


SDCUser.prototype.do_list.options = generalOptions;
SDCUser.prototype.do_list.help = (
    'List your Account Users.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} list [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);


SDCUser.prototype.do_get = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'User id must be specified'));
    }

    return self.cloudapi.getUser(args[0], commonCb);

};


SDCUser.prototype.do_get.options = generalOptions;
SDCUser.prototype.do_get.help = (
    'Get an account User by id.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} get [OPTIONS] user_id \n' +
    '\n' +
    '{{options}}'
);


SDCUser.prototype.do_create = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!opts.password) {
        return callback(new Error(
            'User password is required'));
    }

    if (!opts.login) {
        return callback(new Error(
            'User login is required'));
    }

    if (!opts.email) {
        return callback(new Error(
            'User email is required'));
    }

    var params = {
        email: opts.email,
        login: opts.login,
        password: opts.password
    };

    if (opts.address) {
        params.address = opts.address;
    }

    if (opts.city) {
        params.city = opts.city;
    }

    if (opts.company) {
        params.companyName = opts.company;
    }

    if (opts.country) {
        params.country = opts.country;
    }

    if (opts.name) {
        params.firstName = opts.name;
    }

    if (opts.phone) {
        params.phone = opts.phone;
    }

    if (opts['postal-code']) {
        params.postalCode = opts['postal-code'];
    }

    if (opts.state) {
        params.state = opts.state;
    }

    if (opts.surname) {
        params.lastName = opts.surname;
    }

    return self.cloudapi.createUser(params, commonCb);
};


SDCUser.prototype.do_create.options = [ {
    name: 'login',
    type: 'string',
    help: 'User login name (required)'
}, {
    names: ['help', 'h', '?'],
    type: 'bool',
    help: 'Show this help.'
}, {
    name: 'name',
    type: 'string',
    help: 'User given name'
}, {
    name: 'surname',
    type: 'string',
    help: 'User surname'
}, {
    name: 'address',
    type: 'string',
    help: 'User address'
}, {
    name: 'city',
    type: 'string',
    help: 'User city'
}, {
    name: 'company',
    type: 'string',
    help: 'User company'
}, {
    name: 'country',
    type: 'string',
    help: 'User country'
}, {
    name: 'email',
    type: 'string',
    help: 'User email adress (required)'
}, {
    name: 'phone',
    type: 'string',
    help: 'User phone number'
}, {
    name: 'postal-code',
    type: 'string',
    help: 'User postal code'
}, {
    name: 'state',
    type: 'string',
    help: 'User state'
}, {
    name: 'password',
    type: 'string',
    help: 'User password (required)'
}];

SDCUser.prototype.do_create.help = (
    'Creates a new User for your account.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} create [OPTIONS] \n' +
    '\n' +
    '{{options}}'
);


SDCUser.prototype.do_change_password = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'User id must be specified'));
    }

    if (!opts.password) {
        return callback(new Error(
            'User password is required'));
    }

    if (!opts.password_confirmation) {
        return callback(new Error(
            'User password-confirmation is required'));
    }

    if (opts.password !== opts.password_confirmation) {
        return callback(new Error(
            'User password and password-confirmation must match'));
    }

    var params = {
        password: opts.password,
        password_confirmation: opts.password_confirmation,
        id: args[0]
    };

    return self.cloudapi.changeUserPassword(params, commonCb);
};


SDCUser.prototype.do_change_password.options = [ {
    names: ['help', 'h', '?'],
    type: 'bool',
    help: 'Show this help.'
}, {
    name: 'password',
    type: 'string',
    help: 'User password (required)'
}, {
    name: 'password-confirmation',
    type: 'string',
    help: 'User password confirmation (required)'
}];

SDCUser.prototype.do_change_password.help = (
    'Updates password for a User of your account.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} change-password [OPTIONS] user_id\n' +
    '\n' +
    '{{options}}'
);



SDCUser.prototype.do_update = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'User id must be specified'));
    }

    var params = {};

    if (opts.email) {
        params.email = opts.email;
    }

    if (opts.login) {
        params.login = opts.login;
    }

    if (typeof (opts.address) !== 'undefined') {
        params.address = opts.address;
    }

    if (typeof (opts.city) !== 'undefined') {
        params.city = opts.city;
    }

    if (typeof (opts.company) !== 'undefined') {
        params.companyName = opts.company;
    }

    if (typeof (opts.country) !== 'undefined') {
        params.country = opts.country;
    }

    if (typeof (opts.name) !== 'undefined') {
        params.firstName = opts.name;
    }

    if (typeof (opts.phone) !== 'undefined') {
        params.phone = opts.phone;
    }

    if (typeof (opts['postal-code']) !== 'undefined') {
        params.postalCode = opts['postal-code'];
    }

    if (typeof (opts.state) !== 'undefined') {
        params.state = opts.state;
    }

    if (typeof (opts.surname) !== 'undefined') {
        params.lastName = opts.surname;
    }

    params.id = args[0];

    return self.cloudapi.updateUser(params, commonCb);
};


SDCUser.prototype.do_update.options = [ {
    name: 'login',
    type: 'string',
    help: 'User login name'
}, {
    names: ['help', 'h', '?'],
    type: 'bool',
    help: 'Show this help.'
}, {
    name: 'name',
    type: 'string',
    help: 'User given name'
}, {
    name: 'surname',
    type: 'string',
    help: 'User surname'
}, {
    name: 'address',
    type: 'string',
    help: 'User address'
}, {
    name: 'city',
    type: 'string',
    help: 'User city'
}, {
    name: 'company',
    type: 'string',
    help: 'User company'
}, {
    name: 'country',
    type: 'string',
    help: 'User country'
}, {
    name: 'email',
    type: 'string',
    help: 'User email adress'
}, {
    name: 'phone',
    type: 'string',
    help: 'User phone number'
}, {
    name: 'postal-code',
    type: 'string',
    help: 'User postal code'
}, {
    name: 'state',
    type: 'string',
    help: 'User state'
}];

SDCUser.prototype.do_update.help = (
    'Updates a User of your account.\n' +
    '\n' +
    'Password cannot be modified using this method, please' + '\n' +
    'use {{name}} change-password command instead.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} update [OPTIONS] user_id\n' +
    '\n' +
    '{{options}}'
);


SDCUser.prototype.do_delete = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'User id must be specified'));
    }

    return self.cloudapi.deleteUser(args[0], commonCb);

};


SDCUser.prototype.do_delete.options = generalOptions;
SDCUser.prototype.do_delete.help = (
    'Removes a User from your account.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} delete [OPTIONS] user_id \n' +
    '\n' +
    '{{options}}'
);

// --- User SSH keys

SDCUser.prototype.do_keys = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'User id must be specified'));
    }

    return self.cloudapi.listUserKeys(args[0], commonCb);
};


SDCUser.prototype.do_keys.options = generalOptions;
SDCUser.prototype.do_keys.help = (
    'List SSH keys for the given user.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} keys [OPTIONS] user_id\n' +
    '\n' +
    '{{options}}'
);


SDCUser.prototype.do_key = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'User id must be specified'));
    }

    if (args.length < 2) {
        return callback(new Error(
            'SSH key fingerprint must be specified'));
    }

    return self.cloudapi.getUserKey(args[0], args[1], commonCb);

};


SDCUser.prototype.do_key.options = generalOptions;
SDCUser.prototype.do_key.help = (
    'Get a SSH key from your account.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} key [OPTIONS] user_id key_fingerprint \n' +
    '\n' +
    '{{options}}'
);


SDCUser.prototype.do_upload_key = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'User id must be specified'));
    }

    if (args.length < 2) {
        return callback(new Error(
            'Public SSH key required'));
    }

    function loadNewKey(key) {
        try {
            return fs.readFileSync(key, 'ascii');
        } catch (e) {
            return callback(new Error(
                    util.format('Unable to load key ' + key + ': ' + e)));
        }
    }

    var params = {
        key: loadNewKey(args[1])
    };

    if (opts.name) {
        params.name = opts.name;
    }

    return self.cloudapi.uploadUserKey(args[0], params, commonCb);
};


SDCUser.prototype.do_upload_key.options = [ {
    names: ['name', 'n'],
    type: 'string',
    help: 'SSH key name'
}, {
    names: ['help', 'h', '?'],
    type: 'bool',
    help: 'Show this help.'
}];
SDCUser.prototype.do_upload_key.help = (
    'Uploads a SSH key for an account User.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} upload-key [OPTIONS] user_id public_ssh_key \n' +
    '\n' +
    '{{options}}'
);


SDCUser.prototype.do_delete_key = function (subcmd, opts, args, callback) {
    var self = this;
    if (opts.help) {
        return this.do_help('help', {}, [subcmd], callback);
    }

    if (!args.length) {
        return callback(new Error(
            'User id must be specified'));
    }

    if (args.length < 2) {
        return callback(new Error(
            'SSH key fingerprint must be specified'));
    }

    return self.cloudapi.deleteUserKey(args[0], args[1], commonCb);

};


SDCUser.prototype.do_delete_key.options = generalOptions;
SDCUser.prototype.do_delete_key.help = (
    'Removes the given account User SSH key.\n' +
    '\n' +
    'Usage:\n' +
    '     {{name}} delete-key [OPTIONS] user_id key_fingerprint \n' +
    '\n' +
    '{{options}}'
);


if (require.main === module) {
    cmdln.main(SDCUser);
}
